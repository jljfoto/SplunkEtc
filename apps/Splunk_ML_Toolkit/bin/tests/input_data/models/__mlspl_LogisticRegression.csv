algo,model,options
LogisticRegression,"{""__mlspl_type"": [""algos.LogisticRegression"", ""LogisticRegression""], ""dict"": {""columns"": [""petal_length"", ""petal_width""], ""classes"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPFUzJywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDM1LCksIH0gICAgICAgICAgIAo0AAAALgAAADMAAAA0AAAALgAAADQAAAA0AAAALgAAADUAAAA0AAAALgAAADYAAAA0AAAALgAAADcAAAA0AAAALgAAADgAAAA0AAAALgAAADkAAAA1AAAALgAAADAAAAA1AAAALgAAADEAAAA1AAAALgAAADIAAAA1AAAALgAAADMAAAA1AAAALgAAADQAAAA1AAAALgAAADUAAAA1AAAALgAAADYAAAA1AAAALgAAADcAAAA1AAAALgAAADgAAAA1AAAALgAAADkAAAA2AAAALgAAADAAAAA2AAAALgAAADEAAAA2AAAALgAAADIAAAA2AAAALgAAADMAAAA2AAAALgAAADQAAAA2AAAALgAAADUAAAA2AAAALgAAADYAAAA2AAAALgAAADcAAAA2AAAALgAAADgAAAA2AAAALgAAADkAAAA3AAAALgAAADAAAAA3AAAALgAAADEAAAA3AAAALgAAADIAAAA3AAAALgAAADMAAAA3AAAALgAAADQAAAA3AAAALgAAADYAAAA3AAAALgAAADcAAAA3AAAALgAAADkAAAA=""}, ""feature_variables"": [""petal_length"", ""petal_width""], ""target_variable"": ""sepal_length"", ""estimator"": {""__mlspl_type"": [""sklearn.linear_model.logistic"", ""LogisticRegression""], ""dict"": {""warm_start"": false, ""C"": 1.0, ""max_iter"": 100, ""verbose"": 0, ""intercept_scaling"": 1, ""dual"": false, ""fit_intercept"": true, ""classes_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPFUzJywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDM1LCksIH0gICAgICAgICAgIAo0AAAALgAAADMAAAA0AAAALgAAADQAAAA0AAAALgAAADUAAAA0AAAALgAAADYAAAA0AAAALgAAADcAAAA0AAAALgAAADgAAAA0AAAALgAAADkAAAA1AAAALgAAADAAAAA1AAAALgAAADEAAAA1AAAALgAAADIAAAA1AAAALgAAADMAAAA1AAAALgAAADQAAAA1AAAALgAAADUAAAA1AAAALgAAADYAAAA1AAAALgAAADcAAAA1AAAALgAAADgAAAA1AAAALgAAADkAAAA2AAAALgAAADAAAAA2AAAALgAAADEAAAA2AAAALgAAADIAAAA2AAAALgAAADMAAAA2AAAALgAAADQAAAA2AAAALgAAADUAAAA2AAAALgAAADYAAAA2AAAALgAAADcAAAA2AAAALgAAADgAAAA2AAAALgAAADkAAAA3AAAALgAAADAAAAA3AAAALgAAADEAAAA3AAAALgAAADIAAAA3AAAALgAAADMAAAA3AAAALgAAADQAAAA3AAAALgAAADYAAAA3AAAALgAAADcAAAA3AAAALgAAADkAAAA=""}, ""solver"": ""liblinear"", ""n_iter_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPGk0JywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDEsKSwgfSAgICAgICAgICAgIAoIAAAA""}, ""penalty"": ""l2"", ""multi_class"": ""ovr"", ""random_state"": null, ""tol"": 0.0001, ""n_jobs"": 1, ""coef_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPGY4JywgJ2ZvcnRyYW5fb3JkZXInOiBUcnVlLCAnc2hhcGUnOiAoMzUsIDIpLCB9ICAgICAgICAgIApORAt8a6/4v/PUmFq5//W/LfQJCpsY97+n5+MDSjL2v99OlusjpvS/z26liNbK8r/Jl44ddxjtvxRNSKGOi/G/+efastRm8r9uI28dFu3vv+bY+jYNKvS/Qr4htqig8L842o6Uhknmv6ftYlE3o+S/ZgCkuBOc5b8vsW3srNzlv/cZ8Pj+z+S//OCj21IW4b97MiOVIXTcvwocCghDs+S/epTfVdLV4b/nXkgjefLiv7lVmXD+t+K//ctVD7gO4L+wGWDLBqLjv1Iy7TXrveG/uVJDLBF85b8XS+uCvb3dvxvdsV1TrN+/BY3+eAyU2L8xW0sBcL7Gvxt4iqvpc9O/pH2GqkUS0b8w8LDWZ3PUvzRW7EYWNtG/2J4pP0bw3L+O0et+vzvUv2LH5qQLlbe//hJ1s/Z40L+gpDVZqbHWvw21t1+JjNq/DkWsyIghsb8YbxLrSKSev6oPX6UWFqK/c66prIQBr7+GUbmnJaLXv3dF6iBVIKw/e61UGCg3vT/BKPP7eYfeP1MrgIpUk9E/sljFo3bm4D/tuFvlrE7lPwQx6mmXrNU/J0+JIGMmvz/2DLupnMrlP+ZXsWaxG+M/JbwTYtMD5j+nBdzFtcXlP64qlawvtMQ/ndp0ecRP6T/SkgZOrjrkPzP+4sPwj+0/x6i0PddGwD/hB1HGBErjP3v7HgQVLNU/e6YSk173xL9s5rGNCQXBP4DRlYerZMU/bhefDRqG1T8O171bJo++Pw==""}, ""intercept_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPGY4JywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDM1LCksIH0gICAgICAgICAgIArPAMoxv7Hgv8ttbVe10OW/LXBElLXz5b8sJkzvXh7lv9Xp/dC5I+m/Ebb9q8GX67/iYPr9Jlv0v3u7JkCdNO+/AVKmefCP7b/qnuYEndPyv51Hgos2l+q/6nTfwA8N8r/xt7FRhJX6vyEYmqVPG/+/FclJbj5H/L/5YoruZzP+vzzW9Se6cADAXHSOLszFAMD2gj3zPEQBwH+1tZrPjADAgCqvukuZAcAUsy2u/H8BwFIn4/VvpgHAj58N/mKXAMDd/aYVaaIBwDEOqYNqAwLA4+FJ209oAcCuNNGX0hIBwHl6yg0iDgPAe9GZXZqWA8DwSGA4JNUEwOG4eE2rDgTAdvU9JWYIBcDuA9krme4EwH/f52nBrwTA""}, ""class_weight"": ""auto""}}}}","{""algos"": [""Ridge"", ""ACF"", ""KernelRidge"", ""KernelPCA"", ""KMeans"", ""TFIDF"", ""SVM"", ""LinearRegression"", ""SGDRegressor"", ""PCA"", ""FieldSelector"", ""RandomForestClassifier"", ""DecisionTreeRegressor"", ""Birch"", ""StandardScaler"", ""BernoulliNB"", ""OneClassSVM"", ""SpectralClustering"", ""DBSCAN"", ""SGDClassifier"", ""RandomForestRegressor"", ""LogisticRegression"", ""GaussianNB"", ""ARIMA"", ""DecisionTreeClassifier"", ""PACF"", ""ElasticNet"", ""Lasso""], ""model_name"": ""LogisticRegression"", ""algo_name"": ""LogisticRegression"", ""feature_variables"": [""petal_length"", ""petal_width""], ""target_variable"": [""sepal_length""]}"
