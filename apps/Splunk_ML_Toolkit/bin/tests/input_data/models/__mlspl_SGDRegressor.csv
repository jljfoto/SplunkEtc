algo,model,options
SGDRegressor,"{""__mlspl_type"": [""algos.SGDRegressor"", ""SGDRegressor""], ""dict"": {""estimator"": {""__mlspl_type"": [""sklearn.linear_model.stochastic_gradient"", ""SGDRegressor""], ""dict"": {""warm_start"": false, ""loss"": ""squared_loss"", ""C"": 1.0, ""shuffle"": true, ""verbose"": 0, ""fit_intercept"": true, ""epsilon"": 0.1, ""learning_rate"": ""invscaling"", ""n_iter"": 5, ""penalty"": ""l2"", ""power_t"": 0.25, ""random_state"": null, ""t_"": 751.0, ""eta0"": 0.01, ""l1_ratio"": 0.15, ""alpha"": 0.0001, ""coef_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPGY4JywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDIsKSwgfSAgICAgICAgICAgIAoyF9/bpvvaPxJ2pU8kGdE/""}, ""intercept_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPGY4JywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDEsKSwgfSAgICAgICAgICAgIAq4Zi9voOwTQA==""}, ""average"": false}}, ""target_variable"": ""sepal_length"", ""columns"": [""petal_length"", ""petal_width""], ""scaler"": {""__mlspl_type"": [""sklearn.preprocessing.data"", ""StandardScaler""], ""dict"": {""scale_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPGY4JywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDIsKSwgfSAgICAgICAgICAgIArgnDx/7yL8PxZbOEbwVug/""}, ""with_mean"": true, ""var_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPGY4JywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDIsKSwgfSAgICAgICAgICAgIAro6ZhCSb0IQHIV2ptUg+I/""}, ""mean_"": {""__mlspl_type"": [""numpy"", ""ndarray""], ""npy"": ""k05VTVBZAQBGAHsnZGVzY3InOiAnPGY4JywgJ2ZvcnRyYW5fb3JkZXInOiBGYWxzZSwgJ3NoYXBlJzogKDIsKSwgfSAgICAgICAgICAgIAp3ME/UvxEOQPs3Qhm9LfM/""}, ""with_std"": true, ""n_samples_seen_"": 150, ""copy"": true}}, ""feature_variables"": [""petal_length"", ""petal_width""]}}","{""algos"": [""Ridge"", ""ACF"", ""KernelRidge"", ""KernelPCA"", ""KMeans"", ""TFIDF"", ""SVM"", ""LinearRegression"", ""SGDRegressor"", ""PCA"", ""FieldSelector"", ""RandomForestClassifier"", ""DecisionTreeRegressor"", ""Birch"", ""StandardScaler"", ""BernoulliNB"", ""OneClassSVM"", ""SpectralClustering"", ""DBSCAN"", ""SGDClassifier"", ""RandomForestRegressor"", ""LogisticRegression"", ""GaussianNB"", ""ARIMA"", ""DecisionTreeClassifier"", ""PACF"", ""ElasticNet"", ""Lasso""], ""model_name"": ""SGDRegressor"", ""algo_name"": ""SGDRegressor"", ""feature_variables"": [""petal_length"", ""petal_width""], ""target_variable"": [""sepal_length""]}"
