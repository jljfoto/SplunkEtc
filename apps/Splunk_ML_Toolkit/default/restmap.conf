[script:mltk]
match = /mltk
script = util/rest_handler.py
scripttype = persist
requireAuthentication = true
output_modes = json
passSystemAuth = true
passPayload = true

[eai:conf-experiments]
showInDirSvc = true

[validation:conf-experiments]
type            = validate( match('type', "^(predict_numeric_fields|predict_categorical_fields|detect_numeric_outliers|detect_categorical_outliers|forecast_time_series|cluster_numeric_events)$"), "Value of argument 'type' must be either 'predict_numeric_fields', 'predict_categorical_fields', 'detect_numeric_outliers', 'detect_categorical_outliers', 'forecast_time_series', 'cluster_numeric_events'")
dataSource      = validate( is_json('dataSource'), "Value of argument 'dataSource' must be valid json")
searchStages    = validate( is_json('searchStages'), "Value of argument 'searchStages' must be valid json")
name            = validate( match('name', "^[0-9a-f]{8}[0-9a-f]{4}[4][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}$"), "Value of argument 'name' must be a valid UUID (version 4)")
title           = validate( match('title', "^\S.*$") AND match('title', "^.*\S$"), "Value of argument 'title' cannot be all whitespace or start and end with whitespace")
hasSchedule     = validate( match('hasSchedule', "^(0|1)$"), "Value of argument 'hasSchedule' must be either '0' or '1'")
hasAlerts       = validate( match('hasAlerts', "^(0|1)$"), "Value of argument 'hasAlerts' must be either '0' or '1'")
hasEnabledAlerts = validate( match('hasEnabledAlerts', "^(0|1)$"), "Value of argument 'hasEnabledAlerts' must be either '0' or '1'")
