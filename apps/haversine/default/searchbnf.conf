[haversine-command]
syntax = haversine [<haversine-options>] <origin-options> <input-options> 
maintainer = smaresca
shortdesc = Calculates the distance between two points represented via latitude and longitude, adding the calculated distance to each event
description = Calculates the distance between two points represented via latitude and longitude. Augments each relevant event with the resultant distance, stored in a field named 'distance' or another field as specified. Latitude and longitude for input must be represented in decimal degree format, though separate input fields may be specified for each. Units are in kilometers by default, but optionally represented in miles.
usage = public
appears-in = 4.1, non-core
comment1 = Calculate the distance of a lat/lon pair stored in field 'latlon' relative to an origin, storing result in the default output field 'distance' using a mile as the unit of distance
example1 = ... | haversine origin="-39.44,88.12" units=mi latlon
comment2 = Calculate the distance of a lat/lon pair stored in field 'latlon' relative to an origin, storing result in a custom field named 'dist'
example2 = ... | haversine origin="-39.44,88.12" outputField=dist latlon 
comment3 = Same as above with separate fields named 'lat' and 'lon' for latitude and longitude
example4 = ... | haversine origin="-39.44,88.12" lat lon
example5 = ... | haversine originField=my_location inputFieldLat=lat inputFieldLon=lon
related = geoip map iplocation
related = geoip map iplocation
tags = haversine addinfo
category = results::filter

[haversine-options]
syntax = outputField=<fieldname> units=<mi|km>
description = Options for the haversine command allow for designation of a \
    field name to store the calculated distance between two points (by \
    default using kilometers) and selection of the units used in the distance output.

[origin-options]
syntax = origin=<latitude,longitude> | originField=<fieldname>  
description = Options for the point of origin for the haversine calculation   \
    include origin and originField. Use 'origin' to specify a static value    \
    for latitude and longitude in decimal degree format, like '-44.32,80.22', \
    or use originField to specify a field name represented in an input event  \
    that contains latitude and longitude in the same format.

[input-options]
syntax = inputFieldName | inputFieldLat=<fieldname> inputFieldLon=<fieldname>
description = Options for the input latitude and longitude include two choices \
    1) an input field name corresponding to a field found in event data \
    that stores a latitude and longitude in decimal degree format, like \
    '-44.32,80.22' or 2) two field names from event data that hold      \
    latitude and longitude data
